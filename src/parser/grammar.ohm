Arithmetic {
  MAIN
    = Exp -- expr

  Exp
    = AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp+ -- appl

  PriExp
    = "(" Exp ")"  -- paren
    | "let" ident "=" Exp "in" Exp -- let
    | "\\" ident "->" Exp -- abs
    | ident
    | number

  ident  (an identifier)
    = ~keyword letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
    | "-" number  -- neg

  keyword = "let" | "in"
}
